group_by(NO_EVENTO,IN_APOIO_SOCIAL) |>
summarise(Mean = mean(TEMPO))
dados_stat_apoio
knit_with_parameters("H:/Outros computadores/Meu laptop/Esp/2022.2/Artigo Renata/evasao-master/evasao-master/plots/CIF.Rmd")
install_tinytex()
tinytex::install_tinytex()
library(ggplot2)
library(ggplot2)
library(tidyr)
library(tidyverse)
library(esquisse)
library(ggsave)
dados <- read_delim("BD_ESTUDO.csv",delim = ";", escape_double = FALSE, trim_ws = TRUE)
install.packages("ggsave")
dados <- read_delim("BD_ESTUDO.csv",delim = ";", escape_double = FALSE, trim_ws = TRUE)
dados_transformados <- dados %>%
select(CO_ALUNO, CO_ALUNO_SITUACAO, NO_EVENTO, CO_TURNO_ALUNO, IN_SEXO_ALUNO, CO_COR_RACA_ALUNO, NU_IDADE_ALUNO) %>%
mutate(CO_TURNO_ALUNO=ifelse(CO_TURNO_ALUNO==1,"MORNING",
ifelse(CO_TURNO_ALUNO==3,"NIGHT",
ifelse(CO_TURNO_ALUNO==2,"AFTERNOON",
ifelse(CO_TURNO_ALUNO==4,"FULL-TIME",
ifelse(is.na(CO_TURNO_ALUNO)==TRUE,NA,NA))))),
CO_ALUNO_SITUACAO= ifelse(CO_ALUNO_SITUACAO==4,"EVADED",
ifelse(CO_ALUNO_SITUACAO==5,"EVADED",
ifelse(CO_ALUNO_SITUACAO==6,"GRADUATED","CENSORSHIP"))),
CO_COR_RACA_ALUNO=ifelse(CO_COR_RACA_ALUNO==0,"NAO DECLARADO",
ifelse(CO_COR_RACA_ALUNO==1,"BRANCA",
ifelse(CO_COR_RACA_ALUNO==2,"PRETA",
ifelse(CO_COR_RACA_ALUNO==3,"PARDA",
ifelse(CO_COR_RACA_ALUNO==4,"AMARELA","INDIGENA"))))),
SEXO_ALUNO=(ifelse(IN_SEXO_ALUNO==1,"MALE","FEMALE"))) %>%
drop_na(CO_TURNO_ALUNO)
attach(dados_transformados)
# SHIFT PLOT --------------------------------------------------------------
shift <- ggplot(dados_transformados, na.rm = TRUE) +
aes(x = CO_TURNO_ALUNO, fill = CO_ALUNO_SITUACAO) +
geom_bar(position = "fill") +
scale_fill_brewer(palette = "YlOrRd",direction = -1)+
labs(x = "SHIFT", y = "PROPORTION OF STUDENTS", fill = NULL) +
theme_minimal()+
theme(legend.position = "top",
strip.text = element_text(face="bold",size=15),
plot.title = element_text(face="bold",size=15),
legend.text = element_text(face="bold",size=14),
axis.title.y = element_text(face="bold", color="grey25",
size=17),
axis.title.x = element_text(face="bold", color="grey25",
size=17),
axis.text.x = element_text(color="grey25",
size=14),
axis.text.y.right = element_text(color="grey25",
size=15),
panel.background = element_rect(fill = "white", colour = "white"))
shift
# SHIFT PLOT --------------------------------------------------------------
shift_gray <- ggplot(dados_transformados, na.rm = TRUE) +
aes(x = CO_TURNO_ALUNO, fill = CO_ALUNO_SITUACAO) +
geom_bar(position = "fill") +
scale_fill_grey(start = 0.8, end = 0.2) +  # Escala de cinza
labs(x = "SHIFT", y = "PROPORTION OF STUDENTS", fill = NULL) +
theme_minimal() +
theme(
legend.position = "top",
strip.text = element_text(face = "bold", size = 15),
plot.title = element_text(face = "bold", size = 15),
legend.text = element_text(face = "bold", size = 14),
axis.title.y = element_text(face = "bold", color = "grey25", size = 17),
axis.title.x = element_text(face = "bold", color = "grey25", size = 17),
axis.text.x = element_text(color = "grey25", size = 14),
axis.text.y.right = element_text(color = "grey25", size = 15),
panel.background = element_rect(fill = "white", colour = "white")
)
shift_gray
# Salvar o gráfico em formato TIFF
ggsave("shift_gray.tiff", plot = shift_gray, width = 8, height = 6, dpi = 300, compression = "lzw")
# SEX PLOT  ---------------------------------------------------------------
sex_gray <- ggplot(dados_transformados) +
aes(x = SEXO_ALUNO, fill = CO_ALUNO_SITUACAO) +
geom_bar(position = "fill") +
scale_fill_grey(start = 0.8, end = 0.2) +  # Escala de cinza
labs(x = "SEX", y = "PROPORTION OF STUDENTS", fill = NULL) +
theme_minimal() +
theme(
legend.position = "top",
strip.text = element_text(face = "bold", size = 15),
plot.title = element_text(face = "bold", size = 15),
legend.text = element_text(face = "bold", size = 14),
axis.title.y = element_text(face = "bold", color = "grey25", size = 17),
axis.title.x = element_text(face = "bold", color = "grey25", size = 17),
axis.text.x = element_text(color = "grey25", size = 14),
axis.text.y.right = element_text(color = "grey25", size = 15),
panel.background = element_rect(fill = "white", colour = "white")
)
# Salvar o gráfico em formato TIFF
ggsave("sex_gray.tiff", plot = sex_gray, width = 8, height = 6, dpi = 300, compression = "lzw")
# AGE PLOT ----------------------------------------------------------------
age_gray <- ggplot(dados_transformados) +
aes(x = NU_IDADE_ALUNO, fill = CO_ALUNO_SITUACAO) +
geom_histogram(bins = 30L) +
scale_fill_grey(start = 0.8, end = 0.2) +  # Escala de cinza
labs(x = "AGE", y = "NUMBER OF STUDENTS", fill = NULL) +
theme_minimal() +
theme(
legend.position = "top",
strip.text = element_text(face = "bold", size = 15),
plot.title = element_text(face = "bold", size = 15),
legend.text = element_text(face = "bold", size = 14),
axis.title.y = element_text(face = "bold", color = "grey25", size = 17),
axis.title.x = element_text(face = "bold", color = "grey25", size = 17),
axis.text.x = element_text(color = "grey25", size = 14),
axis.text.y.right = element_text(color = "grey25", size = 15),
panel.background = element_rect(fill = "white", colour = "white")
)
# Salvar o gráfico em formato TIFF
ggsave("age_gray.tiff", plot = age_gray, width = 8, height = 6, dpi = 300, compression = "lzw")
# SITUATION ---------------------------------------------------------------
situation_gray <- ggplot(dados_transformados) +
aes(x = CO_ALUNO_SITUACAO) +
geom_bar(fill = rev(grey.colors(3, start = 0.8, end = 0.2))) +  # Escala de cinza
labs(x = "SITUATION", y = "NUMBER OF STUDENTS") +
theme_minimal() +
theme(
legend.position = "top",
strip.text = element_text(face = "bold", size = 15),
plot.title = element_text(face = "bold", size = 15),
legend.text = element_text(face = "bold", size = 14),
axis.title.y = element_text(face = "bold", color = "grey25", size = 17),
axis.title.x = element_text(face = "bold", color = "grey25", size = 17),
axis.text.x = element_text(color = "grey25", size = 14),
axis.text.y.right = element_text(color = "grey25", size = 15),
panel.background = element_rect(fill = "white", colour = "white")
)
# Salvar o gráfico em formato TIFF
ggsave("situation_gray.tiff", plot = situation_gray, width = 8, height = 6, dpi = 300, compression = "lzw")
# Define a expressão da log-verossimilhança da UNH para um único valor de y
loglik_UNH <- expression(
log(alpha) + log(lambda) - log(y) +
(alpha - 1) * log(1 - lambda * log(y)) +
(1 - (1 - lambda * log(y))^alpha)
)
# Derivada em relação a alpha
d_alpha <- D(loglik_UNH, "alpha")
# Derivada em relação a lambda
d_lambda <- D(loglik_UNH, "lambda")
# Derivada mista: primeiro alpha, depois lambda
d2_alpha_lambda <- D(d_alpha, "lambda")
# Visualizar
d_alpha
d_lambda
d2_alpha_lambda
# Visualizar
d_alpha
d_lambda
d2_alpha_lambda
library(ggplot2)
library(tidyr)
library(tidyverse)
library(esquisse)
library(ggsave)
dados <- read_delim("BD_ESTUDO.csv",delim = ";", escape_double = FALSE, trim_ws = TRUE)
dados_transformados <- dados %>%
select(CO_ALUNO, CO_ALUNO_SITUACAO, NO_EVENTO, CO_TURNO_ALUNO, IN_SEXO_ALUNO, CO_COR_RACA_ALUNO, NU_IDADE_ALUNO) %>%
mutate(CO_TURNO_ALUNO=ifelse(CO_TURNO_ALUNO==1,"MORNING",
ifelse(CO_TURNO_ALUNO==3,"NIGHT",
ifelse(CO_TURNO_ALUNO==2,"AFTERNOON",
ifelse(CO_TURNO_ALUNO==4,"FULL-TIME",
ifelse(is.na(CO_TURNO_ALUNO)==TRUE,NA,NA))))),
CO_ALUNO_SITUACAO= ifelse(CO_ALUNO_SITUACAO==4,"EVADED",
ifelse(CO_ALUNO_SITUACAO==5,"EVADED",
ifelse(CO_ALUNO_SITUACAO==6,"GRADUATED","CENSORSHIP"))),
CO_COR_RACA_ALUNO=ifelse(CO_COR_RACA_ALUNO==0,"NAO DECLARADO",
ifelse(CO_COR_RACA_ALUNO==1,"BRANCA",
ifelse(CO_COR_RACA_ALUNO==2,"PRETA",
ifelse(CO_COR_RACA_ALUNO==3,"PARDA",
ifelse(CO_COR_RACA_ALUNO==4,"AMARELA","INDIGENA"))))),
SEXO_ALUNO=(ifelse(IN_SEXO_ALUNO==1,"MALE","FEMALE"))) %>%
drop_na(CO_TURNO_ALUNO)
attach(dados_transformados)
dados <- read_delim("BD_ESTUDO.csv",delim = ";", escape_double = FALSE, trim_ws = TRUE)
dados_transformados <- dados %>%
select(CO_ALUNO, CO_ALUNO_SITUACAO, NO_EVENTO, CO_TURNO_ALUNO, IN_SEXO_ALUNO, CO_COR_RACA_ALUNO, NU_IDADE_ALUNO) %>%
mutate(CO_TURNO_ALUNO=ifelse(CO_TURNO_ALUNO==1,"MORNING",
ifelse(CO_TURNO_ALUNO==3,"NIGHT",
ifelse(CO_TURNO_ALUNO==2,"AFTERNOON",
ifelse(CO_TURNO_ALUNO==4,"FULL-TIME",
ifelse(is.na(CO_TURNO_ALUNO)==TRUE,NA,NA))))),
CO_ALUNO_SITUACAO= ifelse(CO_ALUNO_SITUACAO==4,"EVADED",
ifelse(CO_ALUNO_SITUACAO==5,"EVADED",
ifelse(CO_ALUNO_SITUACAO==6,"GRADUATED","CENSORSHIP"))),
CO_COR_RACA_ALUNO=ifelse(CO_COR_RACA_ALUNO==0,"NAO DECLARADO",
ifelse(CO_COR_RACA_ALUNO==1,"BRANCA",
ifelse(CO_COR_RACA_ALUNO==2,"PRETA",
ifelse(CO_COR_RACA_ALUNO==3,"PARDA",
ifelse(CO_COR_RACA_ALUNO==4,"AMARELA","INDIGENA"))))),
SEXO_ALUNO=(ifelse(IN_SEXO_ALUNO==1,"MALE","FEMALE"))) %>%
drop_na(CO_TURNO_ALUNO)
attach(dados_transformados)
# Dividir os dados em treino e teste
set.seed(123)
data_split <- initial_split(dados_transformados, prop = 0.7)
dados <- read_delim("BD_ESTUDO.csv",delim = ";", escape_double = FALSE, trim_ws = TRUE)
library(tidymodels)
# Dividir os dados em treino e teste
set.seed(123)
data_split <- initial_split(dados_transformados, prop = 0.7)
train_data <- training(data_split)
test_data <- testing(data_split)
library(kernlab)
install.packages("kernlab")
library(kernlab)
svm_mod <- kernlab::ksvm(NO_EVENTO~., data= train_data)
dados <- read_delim("BD_ESTUDO.csv",delim = ";", escape_double = FALSE, trim_ws = TRUE)
dados_transformados <- dados %>%
select(CO_ALUNO, CO_ALUNO_SITUACAO, NO_EVENTO, CO_TURNO_ALUNO, IN_SEXO_ALUNO, CO_COR_RACA_ALUNO, NU_IDADE_ALUNO) %>%
mutate(CO_TURNO_ALUNO=ifelse(CO_TURNO_ALUNO==1,"MORNING",
ifelse(CO_TURNO_ALUNO==3,"NIGHT",
ifelse(CO_TURNO_ALUNO==2,"AFTERNOON",
ifelse(CO_TURNO_ALUNO==4,"FULL-TIME",
ifelse(is.na(CO_TURNO_ALUNO)==TRUE,NA,NA))))),
CO_ALUNO_SITUACAO= ifelse(CO_ALUNO_SITUACAO==4,"EVADED",
ifelse(CO_ALUNO_SITUACAO==5,"EVADED",
ifelse(CO_ALUNO_SITUACAO==6,"GRADUATED","CENSORSHIP"))),
CO_COR_RACA_ALUNO=ifelse(CO_COR_RACA_ALUNO==0,"NAO DECLARADO",
ifelse(CO_COR_RACA_ALUNO==1,"BRANCA",
ifelse(CO_COR_RACA_ALUNO==2,"PRETA",
ifelse(CO_COR_RACA_ALUNO==3,"PARDA",
ifelse(CO_COR_RACA_ALUNO==4,"AMARELA","INDIGENA"))))),
SEXO_ALUNO=(ifelse(IN_SEXO_ALUNO==1,"MALE","FEMALE"))) %>%
drop_na(CO_TURNO_ALUNO)
library(ggplot2)
library(tidyr)
library(tidyverse)
library(esquisse)
library(ggsave)
dados <- read_delim("BD_ESTUDO.csv",delim = ";", escape_double = FALSE, trim_ws = TRUE)
dados_transformados <- dados %>%
select(CO_ALUNO, CO_ALUNO_SITUACAO, NO_EVENTO, CO_TURNO_ALUNO, IN_SEXO_ALUNO, CO_COR_RACA_ALUNO, NU_IDADE_ALUNO) %>%
mutate(CO_TURNO_ALUNO=ifelse(CO_TURNO_ALUNO==1,"MORNING",
ifelse(CO_TURNO_ALUNO==3,"NIGHT",
ifelse(CO_TURNO_ALUNO==2,"AFTERNOON",
ifelse(CO_TURNO_ALUNO==4,"FULL-TIME",
ifelse(is.na(CO_TURNO_ALUNO)==TRUE,NA,NA))))),
CO_ALUNO_SITUACAO= ifelse(CO_ALUNO_SITUACAO==4,"EVADED",
ifelse(CO_ALUNO_SITUACAO==5,"EVADED",
ifelse(CO_ALUNO_SITUACAO==6,"GRADUATED","CENSORSHIP"))),
CO_COR_RACA_ALUNO=ifelse(CO_COR_RACA_ALUNO==0,"NAO DECLARADO",
ifelse(CO_COR_RACA_ALUNO==1,"BRANCA",
ifelse(CO_COR_RACA_ALUNO==2,"PRETA",
ifelse(CO_COR_RACA_ALUNO==3,"PARDA",
ifelse(CO_COR_RACA_ALUNO==4,"AMARELA","INDIGENA"))))),
SEXO_ALUNO=(ifelse(IN_SEXO_ALUNO==1,"MALE","FEMALE"))) %>%
drop_na(CO_TURNO_ALUNO)
str(dados_transformados)
unique(dados_transformados$CO_TURNO_ALUNO)
################### Distribuição Nadarajah-Haghighi Unitária #################
# Função de densidade de probabilidade ------------------------------------
d_UNH <- function(y, alpha = 1, lambda= 1) {
term1 <- (alpha * lambda) / y
term2 <- (1 - lambda * log(y))^(alpha - 1)
term3 <- exp(1 - (1 - lambda * log(y))^alpha)
return(term1 * term2 * term3)
}
# Função de distribuição acumulada ----------------------------------------
p_UNH <- function(q, alpha = 1, lambda = 1) {
return(exp(1 - (1 - lambda * log(q))^alpha))
}
# Função quantílica -------------------------------------------------------
q_UNH <- function(p, alpha, lambda) {
q <- exp((1/lambda)*((1-(1-log(p))^(1/alpha))))
return(q)
}
# Geração de números aleatórios -------------------------------------------
r_UNH <- function(n, alpha, lambda) {
u <- runif(n)
return(q_UNH(u, alpha, lambda))
}
# Função da log-verossimilhança da UNH
loglik_UNH <- function(par, y) {
alpha <- par[1]
lambda <- par[2]
n <- length(y)
ll <- n*log(alpha*lambda) - sum(log(y)) +
(alpha - 1) * sum(log(1 - lambda*log(y))) +
n - sum((1- lambda*log(y))^alpha)
return(-ll)
}
# Estimação
estim <- function(x) {
result <- optim(par = c(1,1),
fn = loglik_UNH,
y = x,
method = "SANN")
return(result$par)
}
# loglik_UNH(c(0.4,3),x)
# x <- r_UNH(100, 0.5,.3)
# x <- r_UNH(100, 0.5,.3)
# estim(x)
loglik_UNH_exp <- expression(
log(mu*sigma) - log(y) +
(mu - 1)*log(1 - sigma*log(y)) + (1 - (1 - sigma*log(y))^mu)
)
# Derivada em relação a mu
d_mu <- D(loglik_UNH_exp, "mu")
# Derivada em relação a sigma
d_sigma <- D(loglik_UNH_exp, "sigma")
# Derivada mista: primeiro mu, depois sigma
d2_mu_sigma <- D(d_mu, "sigma")
UNH <-function (mu.link = "logit", sigma.link = "identity"){
mstats <- checklink("mu.link", "UNH", substitute(mu.link),
c("logit", "probit", "cloglog", "cauchit", "log", "own"))
dstats <- checklink("sigma.link", "UNH", substitute(sigma.link),
c("inverse", "log", "identity", "own"))
structure(list(family = c("UNH", "Unit-Nadarajah-Haghighi"),
parameters = list(mu = TRUE, sigma = TRUE),
nopar = 2,
type = "Continuous",
mu.link = as.character(substitute(mu.link)),
sigma.link = as.character(substitute(sigma.link)),
mu.linkfun = mstats$linkfun,
sigma.linkfun = dstats$linkfun,
mu.linkinv = mstats$linkinv,
sigma.linkinv = dstats$linkinv,
mu.dr = mstats$mu.eta,
sigma.dr = dstats$mu.eta,
dldm = function(y, mu, sigma) {
dldm <- eval(d_mu)
dldm
},
d2ldm2 = function(y,mu, sigma) {
dldm <- eval(d_mu)
d2ldm2 <- -dldm * dldm
d2ldm2 <- ifelse(d2ldm2 < -1e-15, d2ldm2,-1e-15)
d2ldm2
},
dldd = function(y, mu, sigma) {
dldd <- eval(d_sigma)
dldd
},
d2ldd2 = function(y,mu, sigma) {
dldd <- eval(d_sigma)
d2ldd2 = -dldd * dldd
d2ldd2 <- ifelse(d2ldd2 < -1e-15, d2ldd2,-1e-15)
d2ldd2
},
d2ldmdd = function(y,mu, sigma) {
dldm <- eval(d_mu)
dldd <- eval(d_sigma)
d2ldmdd = -(dldm * dldd)
d2ldmdd<-ifelse(is.na(d2ldmdd)==TRUE,0,d2ldmdd)
d2ldmdd
},
G.dev.incr = function(y, mu, sigma, w, ...) -2 * log(d_UNH(y=y, alpha=mu, lambda=sigma)),
rqres = expression(
rqres(pfun = "p_UNH", type = "Continuous", y = y, alpha=mu, lambda=sigma)
),
mu.initial = expression(mu <- rep(0.5,length(y))),
sigma.initial = expression(sigma<- rep(1, length(y))),
mu.valid = function(mu) all(mu > 0 & mu < 1),
sigma.valid = function(sigma) all(sigma > 0),
y.valid = function(y) all(y > 0 & y < 1)
),
class = c("gamlss.family", "family"))
}
# Checking the results
library(gamlss)
set.seed(10)
n<-1000
# Case 1: without regressors
mu_true<-0.9
sigma_true<-1
mu_result<-sigma_result<-c()
for (i in 1:100) {
y<-r_UNH(n,mu_true,sigma_true)
fit1<-gamlss(y~1, family="UNH", trace = F)
logit_link<-make.link("logit")
mu_result[i]<-logit_link$linkinv(fit1$mu.coefficients)
sigma_result[i]<-fit1$sigma.coefficients
}
result1<- matrix(c(mu_true, mean(mu_result),
sigma_true, mean(sigma_result)),2,2)
colnames(result1)<-c("mu","sigma")
rownames(result1)<-c("true value","mean")
print(round(result1,2))
X<-runif(n)
logit_link<-make.link("logit")
log_link<-make.link("identity")
b1<-.7
b2<-3
mu_true<-logit_link$linkinv(b1+b2*X)
g1<-.5
g2<-1.5
sigma_true<-log_link$linkinv(g1+g2*X)
R<-100
mu_result<-sigma_result<-matrix(NA,R,2)
for (i in 1:R) {
y<-r_UNH(n,mu_true,sigma_true)
fit1<-gamlss(y~X,sigma.formula =~ X, family=UNH(), trace = F)
mu_result[i,]<-fit1$mu.coefficients
sigma_result[i,]<-fit1$sigma.coefficients
}
true_values<-c(b1,b2, g1,g2)
mean_values<-c(apply(mu_result,2,mean),
apply(sigma_result,2,mean))
b_values<-(true_values-mean_values)/true_values*100
eqm_values<-c(apply(mu_result,2,var),
apply(sigma_result,2,var))+(true_values-mean_values)^2
result1<- cbind(true_values,
mean_values,
b_values,
eqm_values
)
colnames(result1)<-c("true value","mean","bias","eqm")
rownames(result1)<-c("b1","b2","g1","g2")
print(round(result1,2))
################### Distribuição Nadarajah-Haghighi Unitária #################
# Função de densidade de probabilidade ------------------------------------
d_UNH <- function(y, alpha = 1, lambda= 1) {
term1 <- (alpha * lambda) / y
term2 <- (1 - lambda * log(y))^(alpha - 1)
term3 <- exp(1 - (1 - lambda * log(y))^alpha)
return(term1 * term2 * term3)
}
# Função de distribuição acumulada ----------------------------------------
p_UNH <- function(q, alpha = 1, lambda = 1) {
return(exp(1 - (1 - lambda * log(q))^alpha))
}
# Função quantílica -------------------------------------------------------
q_UNH <- function(p, alpha, lambda) {
q <- exp((1/lambda)*((1-(1-log(p))^(1/alpha))))
return(q)
}
# Geração de números aleatórios -------------------------------------------
r_UNH <- function(n, alpha, lambda) {
u <- runif(n)
return(q_UNH(u, alpha, lambda))
}
# Função da log-verossimilhança da UNH
loglik_UNH <- function(par, y) {
alpha <- par[1]
lambda <- par[2]
n <- length(y)
ll <- n*log(alpha*lambda) - sum(log(y)) +
(alpha - 1) * sum(log(1 - lambda*log(y))) +
n - sum((1- lambda*log(y))^alpha)
return(-ll)
}
# Estimação
estim <- function(x) {
result <- optim(par = c(1,1),
fn = loglik_UNH,
y = x,
method = "SANN")
return(result$par)
}
loglik_UNH(c(0.4,3),x)
# Estimação
estim <- function(x) {
result <- optim(par = c(1,1),
fn = loglik_UNH,
y = x,
method = "SANN")
return(result$par)
}
loglik_UNH(c(0.4,3),x)
sum(log(d_UNH(x, 0.4,3)))
x <- r_UNH(100, 0.5,.3)
loglik_UNH(c(0.4,3),x)
sum(log(d_UNH(x, 0.4,3)))
x <- r_UNH(100, 0.5,.3)
x <- r_UNH(100, 0.5,.3)
estim(x)
## Exemplo de uso
d_UNH(2,0.4,0.4)
integrate(d_UNH, 0, 1)
# Função de distribuição acumulada ----------------------------------------
p_UNH <- function(q, alpha = 1, lambda = 1) {
return(exp(1 - (1 - lambda * log(q))^alpha))
}
# Exemplo de uso
p_UNH(1,1,1)
z_vals <- seq(0.001, 0.999, length.out = 500)
estim(x)
# Gerar amostra simulada
set.seed(123)
n <- 1000
# Gerar amostra simulada
set.seed(123)
n <- 1000
alpha_true <- 0.8
lambda_true <- 2.5
sample_data <- r_UNH(n, alpha_true, lambda_true)
sample_data
# Estimar parametros
est <- estim(sample_data)
print(est)
# Grafico: histograma + densidade estimada
z_vals <- seq(0.001, 0.999, length.out = 500)
# Grafico: histograma + densidade estimada
z_vals <- seq(0.001, 0.999, length.out = 500)
dens_est <- d_UNH(z_vals, est$alpha, est$labda)
est
dens_est <- d_UNH(z_vals, est$alpha, est$lambda)
dens_est <- d_UNH(z_vals, est[0], est[1])
dens_est
hist(sample_data, probability = TRUE, breaks = 30, col = "lightgray",
main = "Histograma da Amostra vs. Densidade CUW Ajustada",
xlab = "z", ylim = c(0, max(dens_est) * 1.1))
lines(z_vals, dens_est, col = "blue", lwd = 2)
legend("topright",
legend = sprintf("Densidade CUW\n(mu = %.3f, gamma = %.3f)", est$mu, est$gamma),
col = "blue", lwd = 2, bty = "n")
